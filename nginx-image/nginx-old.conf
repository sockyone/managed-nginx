#user  nobody;
# worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

lua_shared_dict auto_ssl 1m;
lua_shared_dict auto_ssl_settings 64k;


resolver kube-dns.kube-system.svc.cluster.local valid=10s;

init_by_lua_block {
    auto_ssl = (require "resty.auto-ssl").new()

    auto_ssl:set("allow_domain", function(domain)
        if string.match(domain, "(%d+).(%d+).(%d+).(%d+)") or string.find(domain, ":", 1, true) then
            return false
        end
        return true
    end)

    auto_ssl:set("storage_adapter", "resty.auto-ssl.storage_adapters.redis")
    auto_ssl:set("redis", {
        host = "redis-master.redis.svc.cluster.local"
    })

    auto_ssl:init()
}

init_worker_by_lua_block {
    auto_ssl:init_worker()
}

log_format nginxlog_json escape=json '{ "timestamp": "$time_iso8601", '
    '"remote_addr": "$remote_addr", '
        '"body_bytes_sent": $body_bytes_sent, '
        '"request_time": $request_time, '
        '"response_status": $status, '
        '"request": "$request", '
        '"request_method": "$request_method", '
        '"host": "$host",'
        '"upstream_addr": "$upstream_addr",'
        '"http_x_forwarded_for": "$http_x_forwarded_for",'
        '"http_referrer": "$http_referer", '
        '"http_user_agent": "$http_user_agent", '
        '"http_version": "$server_protocol", '
        '"db_name": "$db_name", '
        '"pod_group_endpoint": "$pod_group_endpoint",'
        '"nginx_access": true }';
        access_log /dev/stdout nginxlog_json;

# lua_shared_dict routing_cache 25m;

server {
    listen 443 ssl;

    ssl_certificate_by_lua_block {
        auto_ssl:ssl_certificate()
    }

    location / {
        resolver kube-dns.kube-system.svc.cluster.local valid=10s;
        set $target "localhost:3000";
        set $db_name "";
        set $pod_group_endpoint "";
        access_by_lua_block {
            local mysql = require "resty.mysql"

            local db, err = mysql:new()
            if not db then
                return
            end

            db:set_timeout(1000)
            local ok, err, errcode, sqlstate = db:connect{
                host = "openresty-mysql-secondary.default.svc.cluster.local",
                port = 3306,
                database = "merchize_routing",
                user = "nginx",
                password = "123456",
                charset = "utf8",
                max_packet_size = 1024 * 1024,
            }

            if not ok then
                return
            end

            local quoted_domain = ngx.quote_sql_str(ngx.var.host)
            local sql = "select db, pod_group_endpoint, configuration from routing where domain = " .. quoted_domain
            local res, err, errcode, sqlstate = db:query(sql)
            if not res then
                return
            end
            local cjson = require "cjson"
            if (#res == 1) then
                ngx.req.set_header("db_name", res[1].db)
                ngx.req.set_header("store_configuration", res[1].configuration)
                ngx.var.db_name = res[1].db
                ngx.var.pod_group_endpoint = res[1].pod_group_endpoint
                ngx.var.target = res[1].pod_group_endpoint
            else
                ngx.var.db_name = ""
                ngx.var.pod_group_endpoint = ""
                ngx.status = 404
                ngx.say("No domain match")
                local ok, err = db:set_keepalive(10000, 100)
                return ngx.exit(404)
            end
            local ok, err = db:set_keepalive(10000, 100)
            if not ok then
                return
            end
        }

        proxy_pass http://$target;
    }

    ssl_certificate /etc/ssl/resty-auto-ssl-fallback.crt;
    ssl_certificate_key /etc/ssl/resty-auto-ssl-fallback.key;
}

server {
    listen       80;
    server_name  localhost;


    location /.well-known/acme-challenge/ {
      content_by_lua_block {
        auto_ssl:challenge_server()
      }
    }

    # return 301 https://$host$request_uri;

    #charset koi8-r;
}

server {
    listen 127.0.0.1:8999;

    # Increase the body buffer size, to ensure the internal POSTs can always
    # parse the full POST contents into memory.
    client_body_buffer_size 128k;
    client_max_body_size 128k;

    location / {
        content_by_lua_block {
            auto_ssl:hook_server()
        }
    }
}