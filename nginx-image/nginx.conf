#user  nobody;
# worker_processes  1;

# error_log  logs/error.log;
# error_log syslog:server=127.0.0.1:5140;

#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

# pid        logs/nginx.pid;
# events {}

# http {
    lua_shared_dict auto_ssl 1m;
    lua_shared_dict auto_ssl_settings 64k;

    lua_shared_dict mapping 20m;
    lua_shared_dict ssl_allow 5m;
    lua_shared_dict config 5m;

    resolver kube-dns.kube-system.svc.cluster.local valid=10s;

    init_by_lua_block {
        cjson = require("cjson")

        ngx.shared.config:set("blacklist_ips", cjson.encode({}))
        ngx.shared.config:set("whitelist_ips", cjson.encode({}))
        ngx.shared.config:set("under_attack_mode", 2)

        auto_ssl = (require "resty.auto-ssl").new()

        auto_ssl:set("allow_domain", function(domain)
            if string.match(domain, "(%d+).(%d+).(%d+).(%d+)") or string.find(domain, ":", 1, true) then
                return false
            end
            return true
        end)

        auto_ssl:set("storage_adapter", "resty.auto-ssl.storage_adapters.redis")
        auto_ssl:set("redis", {
            host = "redis-master.redis.svc.cluster.local"
        })

        auto_ssl:init()
    }

    init_worker_by_lua_block {
        auto_ssl:init_worker()
    }

    # log_format nginxlog_json escape=json 
    #         '{"timestamp": "$time_iso8601", '
    #         '"remote_addr": "$remote_addr", '
    #         '"body_bytes_sent": $body_bytes_sent, '
    #         '"request_time": $request_time, '
    #         '"response_status": $status, '
    #         # '"request": "$request", '
    #         '"request_method": "$request_method", '
    #         '"host": "$host",'
    #         '"path": "$uri",'
    #         '"upstream_addr": "$upstream_addr",'
    #         '"http_x_forwarded_for": "$http_x_forwarded_for",'
    #         '"http_referrer": "$http_referer", '
    #         '"http_user_agent": "$http_user_agent", '
    #         '"http_version": "$server_protocol", '
    #         '"db_name": "$db_name", '
    #         '"pod_group_endpoint": "$pod_group_endpoint"}';
    
    #access_log /var/log/openresty/access.log nginxlog_json;
    # access_log syslog:server=127.0.0.1:5141,facility=local0,tag=nginx;

    # lua_shared_dict routing_cache 25m;

    server {
        listen 443 ssl;

        ssl_certificate_by_lua_block {
            auto_ssl:ssl_certificate()
        }

        location /private {
            default_type 'text/json';
            add_header 'Content-Type' 'application/json';
            content_by_lua_file /usr/local/openresty/lualib/api.lua;
        }

        location / {
            resolver kube-dns.kube-system.svc.cluster.local valid=10s;
            set $target "";
            set $db_name "";
            set $pod_group_endpoint "";
            access_by_lua_file /usr/local/openresty/lualib/waf.lua;
            # content_by_lua_file /etc/openresty/luascripts/forwarder.lua;
            proxy_pass $target$request_uri;
        }

        ssl_certificate /etc/ssl/resty-auto-ssl-fallback.crt;
        ssl_certificate_key /etc/ssl/resty-auto-ssl-fallback.key;
    }

    server {
        listen       80;
        server_name  localhost;


        location /.well-known/acme-challenge/ {
            content_by_lua_block {
                auto_ssl:challenge_server()
            }
        }

        # return 301 https://$host$request_uri;

        #charset koi8-r;
    }

    server {
        listen 127.0.0.1:8999;

        # Increase the body buffer size, to ensure the internal POSTs can always
        # parse the full POST contents into memory.
        client_body_buffer_size 128k;
        client_max_body_size 128k;

        location / {
            content_by_lua_block {
                auto_ssl:hook_server()
            }
        }
    }

    server {
        listen 127.0.0.1:3123;

        client_body_buffer_size 128k;
        client_max_body_size 128k;

        location /private {
            default_type 'text/json';
            add_header 'Content-Type' 'application/json';
            content_by_lua_file /usr/local/openresty/lualib/api.lua;
        }
    }
# }